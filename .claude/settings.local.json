{
  "permissions": {
    "allow": [
      "Bash(git merge standalone-implementation -m \"$(cat <<''EOF''\nMerge standalone-implementation: Week 2 Public Launch Ready\n\nMerging complete standalone implementation with honest disclosure\nand comprehensive documentation for public launch.\n\nThis brings main branch up to date with:\n- 100% complete standalone implementation (NOT Bitcoin Core fork)\n- AI-assisted development full disclosure\n- Experimental status warnings\n- Complete educational resources\n- Security review documentation\n- Week 2 launch planning\n\nReady for public community review.\n\nðŸ¤– Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git merge:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git checkout:*)",
      "Bash(pandoc:*)",
      "Bash(where:*)",
      "Bash(if [ -f \"/c/Program Files/Google/Chrome/Application/chrome.exe\" ])",
      "Bash(then \"/c/Program Files/Google/Chrome/Application/chrome.exe\" --headless --disable-gpu --print-to-pdf=\"C:\\Users\\will\\dilithion\\Dilithion-Whitepaper-v1.0.pdf\" \"C:\\Users\\will\\dilithion\\WHITEPAPER.html\")",
      "Bash(elif [ -f \"/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe\" ])",
      "Bash(then \"/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe\" --headless --disable-gpu --print-to-pdf=\"C:\\Users\\will\\dilithion\\Dilithion-Whitepaper-v1.0.pdf\" \"C:\\Users\\will\\dilithion\\WHITEPAPER.html\")",
      "Bash(else echo \"Neither Chrome nor Edge found\")",
      "Bash(fi)",
      "Bash(make:*)",
      "Bash(./dilithion-node:*)",
      "WebSearch",
      "Bash(g++:*)",
      "Bash(gcc:*)",
      "Bash(clang++:*)",
      "Bash(cl.exe)",
      "Bash(wsl --list:*)",
      "Bash(wsl g++:*)",
      "Bash(wsl make:*)",
      "Bash(ls:*)",
      "Read(//c/mnt/c/Users/will/**)",
      "Bash(wsl.exe -- g++:*)",
      "Bash(dpkg:*)",
      "Bash(wsl.exe -- dpkg:*)",
      "Bash(wsl.exe -- cmake --version:*)",
      "Bash(awk:*)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(wsl bash:*)",
      "Bash(curl:*)",
      "Bash(wsl -- bash:*)",
      "Bash(wsl git branch:*)",
      "Bash(wsl git checkout main)",
      "Bash(wsl git log:*)",
      "Bash(wsl git merge standalone-implementation --no-ff -m \"$(cat <<''EOF''\nMerge standalone-implementation: Week 2 Public Launch Ready\n\nMerging complete standalone implementation with comprehensive Phase 5 \ntransaction system, wallet integration, mining, and RPC endpoints.\n\nThis brings main branch up to date with:\n- Phase 5.1: Transaction primitives, validation & UTXO system\n- Phase 5.2: Wallet integration with Dilithium signatures\n- Phase 5.3: Transaction relay (P2P propagation)\n- Phase 5.4: Mining integration with mempool transactions\n- Phase 5.5: Complete RPC endpoints (23 methods)\n- Phase 5.6: Testing & security audit\n- Test compilation fixes for all test binaries\n\nKey Achievements:\nâœ… 100% standalone implementation (NOT Bitcoin Core fork)\nâœ… Post-quantum cryptography (CRYSTALS-Dilithium3)\nâœ… Full transaction system with UTXO validation\nâœ… P2P networking with transaction relay\nâœ… Mining with mempool integration\nâœ… Comprehensive RPC interface\nâœ… 11 test binaries (all compile successfully)\nâœ… Successfully tested with 3-node networks\nâœ… Multi-hour stability testing completed\n\nProduction Status:\n- Core functionality: COMPLETE\n- Testing: COMPREHENSIVE\n- Security: Post-quantum ready\n- Ready for testnet deployment\n\nðŸ¤– Generated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(wsl git status:*)",
      "Bash(wsl git checkout:*)",
      "Bash(wsl git add:*)",
      "Bash(wsl git commit:*)",
      "Bash(pkill:*)",
      "Bash(wsl pkill -9 dilithion-node)",
      "Bash(wsl tail:*)",
      "Bash(wsl:*)",
      "Bash(./phase1_test)",
      "Bash(./integration_tests)",
      "Bash(xargs:*)",
      "Bash(./tx_relay_tests)",
      "Bash(timeout 5 ./wallet_tests:*)",
      "Bash(timeout 30 ./wallet_tests:*)",
      "Bash(bash test_runner.sh:*)",
      "Bash(timeout 30 ./wallet_persistence_tests:*)",
      "Bash(timeout 30 ./rpc_tests:*)",
      "Bash(timeout 30 ./integration_tests:*)"
    ],
    "deny": [],
    "ask": []
  }
}
